
import { createContext, useContext, useState, ReactNode } from 'react';

type Language = 'en' | 'ta';

interface LanguageContextType {
  language: Language;
  toggleLanguage: () => void;
  t: (key: string) => string;
}

const translations = {
  en: {
    // Splash Screen
    splash_welcome: "Welcome to Moirecipt",
    splash_subtitle: "Your Receipt's New Best Friend!",
    
    // Onboarding
    onboarding_slide1_title: "Snap your receipt in seconds ЁЯУ╕",
    onboarding_slide2_title: "Save and sort receipts safely ЁЯФТ", 
    onboarding_slide3_title: "Track your spending, the easy way ЁЯТ╕",
    get_started: "Get Started",
    next: "Next",
    skip: "Skip",
    
    // Dashboard
    dashboard_title: "Your Receipts at a Glance ЁЯСА",
    recent_receipts: "Recent Receipts",
    monthly_summary: "Monthly Summary",
    add_receipt: "Add New Receipt",
    total_spent: "Total Spent",
    this_month: "This Month",
    
    // Categories
    food: "Food",
    travel: "Travel", 
    shopping: "Shopping",
    bills: "Bills",
    
    // Actions
    snap_now: "Snap Now",
    upload: "Upload",
    edit: "Edit",
    share: "Share",
    download_pdf: "Download as PDF",
    
    // Empty states
    no_receipts: "No receipts yet. Let's change that!",
    
    // Login
    login_title: "Hey there! Let's log you in.",
    login_google: "Login with Google",
  },
  ta: {
    // Splash Screen  
    splash_welcome: "роорпЛроЗро░ро┐роЪро┐рокрпНроЯрпН-роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН",
    splash_subtitle: "роЙроЩрпНроХро│рпН ро░роЪрпАродрпБ роЗройро┐роорпЗро▓рпН роОройрпН рокро╛роЯрпНроЯрпБроХрпНроХрпБ!",
    
    // Onboarding
    onboarding_slide1_title: "ро░роЪрпАродрпИ рокро│рпАроЪрпН роОрой роТро░рпБ роХро┐ро│ро┐роХрпНроХро┐ро▓рпН рокро┐роЯро┐роХрпНроХро▓ро╛роорпН! ЁЯУ╕",
    onboarding_slide2_title: "роЙроЩрпНроХро│рпН ро░роЪрпАродрпБроХро│рпН рокро╛родрпБроХро╛рокрпНрокро╛роХ роЪрпЗрооро┐роХрпНроХрокрпНрокроЯрпБроорпН! ЁЯФТ",
    onboarding_slide3_title: "роЪрпЖро▓ро╡рпБроХро│рпИ роОро│ро┐родро╛роХ роХрогрпНроХро╛рогро┐роХрпНроХро▓ро╛роорпН! ЁЯТ╕", 
    get_started: "роЖро░роорпНрокро┐роХрпНроХро▓ро╛роорпН",
    next: "роЕроЯрпБродрпНродрпБ",
    skip: "родро╡ро┐ро░рпН",
    
    // Dashboard
    dashboard_title: "роЙроЩрпНроХро│рпН ро░роЪрпАродрпБроХро│рпНтАФall in one sight! ЁЯСА",
    recent_receipts: "рокрпБродро┐роп ро░роЪрпАродрпБроХро│рпН",
    monthly_summary: "рооро╛род роЪрпЖро▓ро╡рпБроХро│рпН", 
    add_receipt: "рокрпБродро┐роп ро░роЪрпАродрпБ роЪрпЗро░рпНроХрпНроХ",
    total_spent: "роорпКродрпНрод роЪрпЖро▓ро╡рпБ",
    this_month: "роЗроирпНрод рооро╛родроорпН",
    
    // Categories
    food: "роЪро╛рокрпНрокро╛роЯрпБ",
    travel: "рокропрогроорпН",
    shopping: "ро╖ро╛рокрпНрокро┐роЩрпН", 
    bills: "рокро┐ро▓рпНроХро│рпН",
    
    // Actions
    snap_now: "роЗрокрпНрокрпЛродрпЗ роОроЯрпБ!",
    upload: "роКроЯрпБро░рпБро╡рпБ рокроЯроорпН роЪрпЗро░рпН!",
    edit: "рооро╛ро▒рпНро▒рпБ",
    share: "рокроХро┐ро░рпН",
    download_pdf: "PDF роЖроХ роЗро▒роХрпНроХрпБроородро┐ роЪрпЖропрпН",
    
    // Empty states
    no_receipts: "роЗройрпНройрпБроорпН ро░роЪрпАродрпБроХро│рпН роЗро▓рпНро▓... ро╡ро╛роЩрпНроХ роТро░рпБ рокрпБродро┐ропродрпИ роЪрпЗро░рпН!",
    
    // Login
    login_title: "ро╡ро╛роЩрпНроХ роирогрпНрокро╛! роЙро│рпНро│рпЗ рокрпЛропро┐роЯро▓ро╛роорпН.",
    login_google: "роХрпВроХро┐ро│рпН роХрпКрогрпНроЯрпБ роирпБро┤рпИропрпБроЩрпНроХро│рпН",
  }
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider = ({ children }: { children: ReactNode }) => {
  const [language, setLanguage] = useState<Language>('en');

  const toggleLanguage = () => {
    setLanguage(prev => prev === 'en' ? 'ta' : 'en');
  };

  const t = (key: string): string => {
    return translations[language][key as keyof typeof translations['en']] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, toggleLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
