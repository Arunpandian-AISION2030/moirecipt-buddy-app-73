
import { createContext, useContext, useState, ReactNode } from 'react';

type Language = 'en' | 'ta';

interface LanguageContextType {
  language: Language;
  toggleLanguage: () => void;
  t: (key: string) => string;
}

const translations = {
  en: {
    // Splash Screen
    splash_welcome: "Welcome to Moirecipt",
    splash_subtitle: "Your Receipt's New Best Friend!",
    
    // Onboarding
    onboarding_slide1_title: "Snap your receipt in seconds ЁЯУ╕",
    onboarding_slide2_title: "Save and sort receipts safely ЁЯФТ", 
    onboarding_slide3_title: "Track your spending, the easy way ЁЯТ╕",
    get_started: "Get Started",
    next: "Next",
    skip: "Skip",
    
    // Dashboard
    dashboard_title: "Your Receipts at a Glance ЁЯСА",
    recent_receipts: "Recent Receipts",
    monthly_summary: "Monthly Summary",
    add_receipt: "Add New Receipt",
    total_spent: "Total Spent",
    this_month: "This Month",
    
    // Categories
    food: "Food",
    travel: "Travel", 
    shopping: "Shopping",
    bills: "Bills",
    
    // Actions
    snap_now: "Snap Now",
    upload: "Upload",
    edit: "Edit",
    share: "Share",
    download_pdf: "Download as PDF",
    
    // Empty states
    no_receipts: "No receipts yet. Let's change that!",
    
    // Login
    login_title: "Hey there! Let's log you in.",
    login_google: "Login with Google",

    // Bill Entry Form
    bill_entry_title: "Event Bill Entry ЁЯОЙ",
    client_name: "S.O. / D.O. Name",
    native_place: "Native Place",
    function_type: "Function Type",
    function_date: "Date of Function",
    venue_details: "Venue Name & Address",
    contact_number: "Contact Number",
    services_provided: "Items / Services Provided",
    total_amount: "Amount Charged",
    advance_paid: "Advance Paid",
    balance_due: "Balance Due",
    payment_mode: "Payment Mode",
    
    // Function Types
    wedding: "Wedding",
    birthday: "Birthday",
    anniversary: "Anniversary",
    other: "Other",
    
    // Payment Modes
    cash: "Cash",
    gpay: "GPay",
    cheque: "Cheque",
    upi: "UPI",
    
    // Bill Summary
    bill_summary_title: "Event Bill Summary",
    invoice_number: "Invoice No.",
    thank_you_message: "Thank you for choosing us! Wishing you a beautiful celebration!",
    
    // Actions
    create_bill: "Create Bill",
    save_bill: "Save Bill",
    print_bill: "Print Bill",
    share_whatsapp: "Share via WhatsApp",
    view_summary: "View Summary",
    edit_bill: "Edit Bill",
    
    // Navigation
    bills_menu: "Event Bills",
    receipts_menu: "Receipts",
    back: "Back",
    
    // Form validation
    required_field: "This field is required",
    invalid_amount: "Please enter a valid amount",
    invalid_contact: "Please enter a valid contact number",
  },
  ta: {
    // Splash Screen  
    splash_welcome: "роорпЛроЗро░ро┐роЪро┐рокрпНроЯрпН-роХрпНроХрпБ ро╡ро░ро╡рпЗро▒рпНроХро┐ро▒рпЛроорпН",
    splash_subtitle: "роЙроЩрпНроХро│рпН ро░роЪрпАродрпБ роЗройро┐роорпЗро▓рпН роОройрпН рокро╛роЯрпНроЯрпБроХрпНроХрпБ!",
    
    // Onboarding
    onboarding_slide1_title: "ро░роЪрпАродрпИ рокро│рпАроЪрпН роОрой роТро░рпБ роХро┐ро│ро┐роХрпНроХро┐ро▓рпН рокро┐роЯро┐роХрпНроХро▓ро╛роорпН! ЁЯУ╕",
    onboarding_slide2_title: "роЙроЩрпНроХро│рпН ро░роЪрпАродрпБроХро│рпН рокро╛родрпБроХро╛рокрпНрокро╛роХ роЪрпЗрооро┐роХрпНроХрокрпНрокроЯрпБроорпН! ЁЯФТ",
    onboarding_slide3_title: "роЪрпЖро▓ро╡рпБроХро│рпИ роОро│ро┐родро╛роХ роХрогрпНроХро╛рогро┐роХрпНроХро▓ро╛роорпН! ЁЯТ╕", 
    get_started: "роЖро░роорпНрокро┐роХрпНроХро▓ро╛роорпН",
    next: "роЕроЯрпБродрпНродрпБ",
    skip: "родро╡ро┐ро░рпН",
    
    // Dashboard
    dashboard_title: "роЙроЩрпНроХро│рпН ро░роЪрпАродрпБроХро│рпНтАФall in one sight! ЁЯСА",
    recent_receipts: "рокрпБродро┐роп ро░роЪрпАродрпБроХро│рпН",
    monthly_summary: "рооро╛род роЪрпЖро▓ро╡рпБроХро│рпН", 
    add_receipt: "рокрпБродро┐роп ро░роЪрпАродрпБ роЪрпЗро░рпНроХрпНроХ",
    total_spent: "роорпКродрпНрод роЪрпЖро▓ро╡рпБ",
    this_month: "роЗроирпНрод рооро╛родроорпН",
    
    // Categories
    food: "роЪро╛рокрпНрокро╛роЯрпБ",
    travel: "рокропрогроорпН",
    shopping: "ро╖ро╛рокрпНрокро┐роЩрпН", 
    bills: "рокро┐ро▓рпНроХро│рпН",
    
    // Actions
    snap_now: "роЗрокрпНрокрпЛродрпЗ роОроЯрпБ!",
    upload: "роКроЯрпБро░рпБро╡рпБ рокроЯроорпН роЪрпЗро░рпН!",
    edit: "рооро╛ро▒рпНро▒рпБ",
    share: "рокроХро┐ро░рпН",
    download_pdf: "PDF роЖроХ роЗро▒роХрпНроХрпБроородро┐ роЪрпЖропрпН",
    
    // Empty states
    no_receipts: "роЗройрпНройрпБроорпН ро░роЪрпАродрпБроХро│рпН роЗро▓рпНро▓... ро╡ро╛роЩрпНроХ роТро░рпБ рокрпБродро┐ропродрпИ роЪрпЗро░рпН!",
    
    // Login
    login_title: "ро╡ро╛роЩрпНроХ роирогрпНрокро╛! роЙро│рпНро│рпЗ рокрпЛропро┐роЯро▓ро╛роорпН.",
    login_google: "роХрпВроХро┐ро│рпН роХрпКрогрпНроЯрпБ роирпБро┤рпИропрпБроЩрпНроХро│рпН",

    // Bill Entry Form
    bill_entry_title: "ро╡ро┐ро┤ро╛ рокро┐ро▓рпН роОройрпНроЯрпНро░ро┐ ЁЯОЙ",
    client_name: "рокрпЖропро░рпН (роЕрокрпНрокро╛ро╡ро┐ройрпН рокрпЖропро░рпН роЙроЯройрпН)",
    native_place: "роКро░рпН / роЪрпКроирпНрод роЗроЯроорпН",
    function_type: "роиро┐роХро┤рпНроЪрпНроЪро┐ ро╡роХрпИ",
    function_date: "ро╡ро┐ро┤ро╛ родрпЗродро┐",
    venue_details: "ро╡ро┐ро┤ро╛ роироЯроХрпНроХрпБроорпН роЗроЯроорпН",
    contact_number: "родрпКроЯро░рпНрокрпБ роОрогрпН",
    services_provided: "ро╡ро┤роЩрпНроХро┐роп роЪрпЗро╡рпИроХро│рпН",
    total_amount: "рокрогроорпН (роорпКродрпНродроорпН)",
    advance_paid: "роорпБройрпНрокрогроорпН",
    balance_due: "роорпАродро┐ рокрогроорпН",
    payment_mode: "рокрогроорпН роХрпКроЯрпБродрпНрод ро╡ро┐родроорпН",
    
    // Function Types
    wedding: "родро┐ро░рпБроорогроорпН",
    birthday: "ро╡ропродрпБ ро╡ро┐ро┤ро╛",
    anniversary: "роЖрогрпНроЯрпБ ро╡ро┐ро┤ро╛",
    other: "рооро▒рпНро▒ро╡рпИ",
    
    // Payment Modes
    cash: "рокрогроорпН",
    gpay: "GPay",
    cheque: "роХро╛роЪрпЛро▓рпИ",
    upi: "UPI",
    
    // Bill Summary
    bill_summary_title: "ро╡ро┐ро┤ро╛ рокро┐ро▓рпН роЪрпБро░рпБроХрпНроХроорпН",
    invoice_number: "рокро┐ро▓рпН роОрогрпН.",
    thank_you_message: "роОроЩрпНроХро│рпИ родрпЗро░рпНроирпНродрпЖроЯрпБродрпНродродро▒рпНроХрпБ роиройрпНро▒ро┐! роЙроЩрпНроХро│рпН ро╡ро┐ро┤ро╛ роЗройро┐родро╛роХ роироЯрпИрокрпЖро▒ ро╡ро╛ро┤рпНродрпНродрпБроХро│рпН!",
    
    // Actions
    create_bill: "рокро┐ро▓рпН роЙро░рпБро╡ро╛роХрпНроХрпБ",
    save_bill: "рокро┐ро▓рпН роЪрпЗрооро┐",
    print_bill: "рокро┐ро▓рпН роЕроЪрпНроЪро┐роЯрпБ",
    share_whatsapp: "WhatsApp роорпВро▓роорпН рокроХро┐ро░рпН",
    view_summary: "роЪрпБро░рпБроХрпНроХроорпН рокро╛ро░рпН",
    edit_bill: "рокро┐ро▓рпН рооро╛ро▒рпНро▒рпБ",
    
    // Navigation
    bills_menu: "ро╡ро┐ро┤ро╛ рокро┐ро▓рпНроХро│рпН",
    receipts_menu: "ро░роЪрпАродрпБроХро│рпН",
    back: "рокро┐ройрпНройро╛ро▓рпН",
    
    // Form validation
    required_field: "роЗроирпНрод рокрпБро▓роорпН роЕро╡роЪро┐ропроорпН",
    invalid_amount: "роЪро░ро┐ропро╛рой родрпКроХрпИропрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН",
    invalid_contact: "роЪро░ро┐ропро╛рой родрпКроЯро░рпНрокрпБ роОрогрпНрогрпИ роЙро│рпНро│ро┐роЯро╡рпБроорпН",
  }
};

const LanguageContext = createContext<LanguageContextType | undefined>(undefined);

export const LanguageProvider = ({ children }: { children: ReactNode }) => {
  const [language, setLanguage] = useState<Language>('en');

  const toggleLanguage = () => {
    setLanguage(prev => prev === 'en' ? 'ta' : 'en');
  };

  const t = (key: string): string => {
    return translations[language][key as keyof typeof translations['en']] || key;
  };

  return (
    <LanguageContext.Provider value={{ language, toggleLanguage, t }}>
      {children}
    </LanguageContext.Provider>
  );
};

export const useLanguage = () => {
  const context = useContext(LanguageContext);
  if (!context) {
    throw new Error('useLanguage must be used within a LanguageProvider');
  }
  return context;
};
